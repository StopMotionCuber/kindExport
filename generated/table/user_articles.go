//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var UserArticles = newUserArticlesTable("", "user_articles", "")

type userArticlesTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnInteger
	UserID    sqlite.ColumnInteger
	ArticleID sqlite.ColumnInteger
	CreatedAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type UserArticlesTable struct {
	userArticlesTable

	EXCLUDED userArticlesTable
}

// AS creates new UserArticlesTable with assigned alias
func (a UserArticlesTable) AS(alias string) *UserArticlesTable {
	return newUserArticlesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserArticlesTable with assigned schema name
func (a UserArticlesTable) FromSchema(schemaName string) *UserArticlesTable {
	return newUserArticlesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserArticlesTable with assigned table prefix
func (a UserArticlesTable) WithPrefix(prefix string) *UserArticlesTable {
	return newUserArticlesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserArticlesTable with assigned table suffix
func (a UserArticlesTable) WithSuffix(suffix string) *UserArticlesTable {
	return newUserArticlesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserArticlesTable(schemaName, tableName, alias string) *UserArticlesTable {
	return &UserArticlesTable{
		userArticlesTable: newUserArticlesTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newUserArticlesTableImpl("", "excluded", ""),
	}
}

func newUserArticlesTableImpl(schemaName, tableName, alias string) userArticlesTable {
	var (
		IDColumn        = sqlite.IntegerColumn("id")
		UserIDColumn    = sqlite.IntegerColumn("user_id")
		ArticleIDColumn = sqlite.IntegerColumn("article_id")
		CreatedAtColumn = sqlite.TimestampColumn("created_at")
		allColumns      = sqlite.ColumnList{IDColumn, UserIDColumn, ArticleIDColumn, CreatedAtColumn}
		mutableColumns  = sqlite.ColumnList{UserIDColumn, ArticleIDColumn, CreatedAtColumn}
	)

	return userArticlesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		ArticleID: ArticleIDColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
